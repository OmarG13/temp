name: SSHExecuteLSWithoutSSHPass
type: CLIENT
description: |
  This artifact uses execve() to SSH into a remote system using a username and password,
  and runs the 'ls' command on a specified directory without requiring sshpass.
parameters:
  - name: ssh_host
    description: Enter the IP address or hostname of the target system
    type: string
  - name: ssh_user
    description: Enter the SSH username
    type: string
  - name: ssh_password
    description: Enter the SSH password
    type: string
  - name: directory
    description: Enter the directory to list (default: home directory)
    type: string
    default: "~"
sources:
  - precondition: |
      SELECT os_type FROM info()
      WHERE os_type = "linux" OR os_type = "darwin"
    query: |
      SELECT * FROM execve(
        args=["bash", "-c", concat(
          "'echo ", ssh_password, " | ssh -tt ",
          ssh_user, "@", ssh_host, " ls ", directory, "'"
        )],
        cwd="",
        stdout=TRUE
      )




---
name: CollectMemoryAndDiskImages
description: Collect memory and disk images from a Linux device over SSH.
type: VQL
parameters:
  - name: TargetDevice
    type: string
    description: The SSH hostname or IP of the target device.
queries:
  - name: CollectMemoryDump
    description: Collect memory dump using LiME or dd.
    query: |
      LET mem_path = "/tmp/memory_dump.lime"
      SELECT * FROM remote(
        accessor="SSH",
        hostname=parameters.TargetDevice,
        commands=[
          {
            cmd: "modprobe lime path=/tmp/memory_dump.lime format=lime",
            description: "Load LiME kernel module for memory dumping."
          },
          {
            cmd: "ls -lh /tmp/memory_dump.lime",
            description: "Verify memory dump size."
          }
        ],
        file_collect=[{path: mem_path, name: "memory_dump.lime"}]
      )
  - name: CollectDiskImage
    description: Collect disk image using dd.
    query: |
      LET disk_image_path = "/tmp/disk_image.img"
      SELECT * FROM remote(
        accessor="SSH",
        hostname=parameters.TargetDevice,
        commands=[
          {
            cmd: "dd if=/dev/sda of=/tmp/disk_image.img bs=1M status=progress",
            description: "Create a disk image of /dev/sda."
          },
          {
            cmd: "ls -lh /tmp/disk_image.img",
            description: "Verify disk image size."
          }
        ],
        file_collect=[{path: disk_image_path, name: "disk_image.img"}]
      )




---
name: SSH_KapeFiles_Hunt
description: Collect files from a directory on a Linux host using SSH accessor.
type: VQL
parameters:
  - name: TargetDevice
    type: string
    description: The SSH hostname or IP of the target device.
  - name: DirectoryToCollect
    type: string
    description: Directory path to collect files from.
queries:
  - name: CollectFilesOverSSH
    description: Use SSH to collect files from a specified directory using Linux.KapeFiles.CollectFromDirectory.
    query: |
      SELECT * FROM remote(
        accessor="SSH",
        hostname=parameters.TargetDevice,
        artifact="Linux.KapeFiles.CollectFromDirectory",
        args={
          "directory": parameters.DirectoryToCollect
        }
      )


name: SSHCollectFromDirectory
type: VQL
parameters:
  - name: TargetDevice
    type: string
    description: The SSH hostname or IP of the target device.
  - name: TargetDirectory
    type: string
    description: The directory path to collect files from.
queries:
  - name: CollectFilesOverSSH
    description: Use SSH accessor to collect files from a remote Linux system.
    query: |
      SELECT * FROM remote(
        accessor="SSH",
        hostname=parameters.TargetDevice,
        query={
          SELECT * FROM ArtifactCollector(
            artifact="Linux.KapeFiles.CollectFromDirectory",
            parameters={
              "BasePath": parameters.TargetDirectory
            }
          )
        }
      )





AGAIN

  - name: CollectFilesOverSSH
    description: List and collect files from a remote directory over SSH.
    query: |
      SELECT * FROM remote(
        accessor="SSH",
        hostname=parameters.TargetDevice,
        query={
          LET file_paths = SELECT Path AS file_path FROM glob(globs=[parameters.TargetDirectory + "/*"])
          SELECT * FROM foreach(
            row=file_paths,
            query={
              SELECT * FROM stat(path=row.file_path) |
              SELECT * FROM collect(path=row.file_path)
            }
          )
        }
      )
